import{defineConfig as i}from"tsup";import{NodeResolvePlugin as f}from"@esbuild-plugins/node-resolve";import s from"fs";import r from"path";const a=r.resolve(process.cwd(),"../../","packages/ridb-core"),m={name:"wasm",setup(e){e.onResolve({filter:/\.wasm$/},t=>s.existsSync(r.resolve(a,t.path))?{path:r.resolve(a,t.path),namespace:"wasm"}:{path:r.resolve("../../node_modules",t.path),namespace:"wasm"}),e.onLoad({filter:/.*/,namespace:"wasm"},async t=>({contents:`export default Buffer.from("${(await s.promises.readFile(t.path)).toString("base64")}", "base64")`,loader:"js"}))}},p=[f({extensions:[".ts",".js",".wasm"],onResolved:e=>e.includes("node_modules")?{external:!0}:e})];function u({format:e,entry:t,banner:n}){return i(({watch:o})=>({entry:t,format:e,outDir:"build",target:"esnext",minify:!1,clean:!1,esbuildPlugins:[m,...p],banner:n,external:["buffer","next","vitest","react-server-dom-webpack","tsup","react-server-dom-webpack/client.edge"]}))}export{u as default,p as plugins,m as wasmPlugin};
